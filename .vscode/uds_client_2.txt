import os
import time
import shutil
import zipfile
import psutil
from Inputs.drivers import oled  # import directly here

# Progress Animation
def show_progress_animation(base_msg, duration=3, interval=0.5):
    steps = int(duration / interval)
    for i in range(steps):
        dots = '.' * ((i % 3) + 1)
        oled.display_centered_text(f"{base_msg}{dots}")
        time.sleep(interval)

# Transfer files to USB
def transfer_files_to_usb():
    log_folder = "/home/mobase/Can_FD/Report"
    usb_root = "/media/mobase"

    try:
        # Step 1: Check for USB mount
        oled.display_centered_text("Looking for USB...")
        time.sleep(2)
        devices = [d for d in os.listdir(usb_root) if os.path.ismount(os.path.join(usb_root, d))]
        if not devices:
            oled.display_centered_text("No USB Found")
            time.sleep(3)
            return

        usb_path = os.path.join(usb_root, devices[0])
        zip_name = f"DiagnosticBackup_{int(time.time())}.zip"
        zip_path = f"/tmp/{zip_name}"

        if not os.path.exists(log_folder):
            oled.display_centered_text("Log folder not found")
            time.sleep(3)
            return

        # Step 2: Compress logs to ZIP
        show_progress_animation("Zipping files", duration=3)
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(log_folder):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, log_folder)
                    zipf.write(file_path, arcname)

        zip_size = os.path.getsize(zip_path)

        # Step 3: Check USB free space
        usage = psutil.disk_usage(usb_path)
        if usage.free < zip_size:
            oled.display_centered_text("Not enough\nspace on USB")
            os.remove(zip_path)
            time.sleep(3)
            return

        # Step 4: Copy ZIP to USB
        show_progress_animation("Copying to USB", duration=3)
        shutil.copy2(zip_path, usb_path)
        os.remove(zip_path)

        oled.display_centered_text("Transfer Complete!")
        time.sleep(2)

    except Exception as e:
        oled.display_centered_text(f"Error:\n{str(e)[:20]}")
        time.sleep(4)


####
from Inputs.drivers.usb_transfer import transfer_files_to_usb

# Call directly with no arguments
transfer_files_to_usb()






