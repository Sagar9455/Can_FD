def convert_report(report):
    grouped = defaultdict(list)
    total_duration = 0
    for entry in report:
        grouped[entry['id']].append(entry)

    test_cases = []
    for tc_id, steps in grouped.items():
        overall_status = "Pass"
        step_entries = []
        test_duration = 0

        for i, step in enumerate(steps):
            request_status = "Pass" if step["status"].lower() == "pass" else "Fail"
            response_status = "Pass"
            fail_reason = step.get("failure_reason", "-")

            if step.get("response_timestamp") is None:
                response_status = "Fail"
                fail_reason = "No response received"

            if response_status.lower() == "fail":
                overall_status = "Fail"

            description = step["description"]
            if " - " in description:
                description = description.split(" - ", 1)[1]

            step_num = i + 1

            try:
                request_timestamp = datetime.fromtimestamp(float(step["timestamp"])).strftime("%H:%M:%S.%f")[:-3]
            except Exception:
                request_timestamp = "Invalid"

            try:
                response_timestamp = datetime.fromtimestamp(float(step["response_timestamp"])).strftime("%H:%M:%S.%f")[:-3] if step.get("response_timestamp") else "N/A"
            except Exception:
                response_timestamp = "Invalid"

            if step.get("timestamp") and step.get("response_timestamp"):
                try:
                    request_time = datetime.fromtimestamp(float(step["timestamp"]))
                    response_time = datetime.fromtimestamp(float(step["response_timestamp"]))
                    duration = (response_time - request_time).total_seconds()
                    test_duration += duration
                except Exception:
                    pass

            # Adding the "Request Sent" and "Response Received" rows
            step_entries.append({
                "step": step_num,
                "description": description,
                "timestamp": request_timestamp,
                "type": "Request Sent",
                "status": request_status.capitalize(),
                "reason": "-",
                "rowspan": 2
            })
            step_entries.append({
                "timestamp": response_timestamp,
                "type": "Response Received",
                "status": response_status.capitalize(),
                "reason": fail_reason
            })

        test_cases.append({
            "name": tc_id,
            "status": overall_status,
            "steps": step_entries,
            "duration": test_duration
        })
        total_duration += test_duration

    return test_cases, total_duration




####







def generate_report(test_cases, filename="UDS_Report.html", log_filename="N/A", generated_time=None, duration=None):
    if generated_time is None:
        generated_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    body = ""
    for test_case in test_cases:
        result_class = "pass" if test_case["status"] == "Pass" else "fail"
        body += f'<button class="accordion">▶ {test_case["name"]} - <span class="{result_class}">{test_case["status"]}</span></button>\n'
        body += '<div class="panel" style="display: block;"><table><tr><th>Step</th><th>Description</th><th>Timestamp</th><th>Type</th><th>Status</th><th>Failure Reason</th></tr>\n'
        for step in test_case["steps"]:
            row_class = "step-pass" if step["status"] == "Pass" else "step-fail"
            rowspan = f'rowspan="{step["rowspan"]}"' if "rowspan" in step else ""
            body += f'<tr class="{row_class}">'
            if "step" in step:
                body += f'<td {rowspan}>{step["step"]}</td>'
                body += f'<td {rowspan}>{step["description"]}</td>' 
            body += f'<td>{step["timestamp"]}</td><td>{step["type"]}</td>'
            body += f'<td class="{step["status"].lower()}">{step["status"]}</td><td>{step.get("reason", "-")}</td></tr>\n'
        body += '</table></div>\n'

    total = len(test_cases)
    passed = sum(1 for tc in test_cases if tc["status"] == "Pass")
    failed = total - passed

    html_template = """<!DOCTYPE html>
<html>
<head>
    <title>UDS Diagnostic Report</title>
    <style>
        /* Add styles here */
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        /* Add JavaScript here for accordion functionality */
    </script>
</head>
<body>
    <h1>UDS Diagnostic Report</h1>
    <div style="text-align:center; margin-bottom: 20px;">
        <p><strong>Generated:</strong> {generated_time}</p>
        <p><strong>CAN Log File:</strong> {log_filename}</p>
        <p><strong>Total Test Cases:</strong> {total}</p>
        <p style="color:green;"><strong>Passed:</strong> {passed}</p>
        <p style="color:red;"><strong>Failed:</strong> {failed}</p>
        <p><strong>Total Test Duration:</strong> {total_duration:.3f} seconds</p>
    </div>
    <canvas id="summaryChart" width="300" height="300" style="display: block; margin: 0 auto 30px;"></canvas>
    {body}
</body>
</html>
"""

    with open(filename, "w") as f:
        f.write(html_template.format(
            body=body,
            total=total,
            passed=passed,
            failed=failed,
            generated_time=generated_time,
            log_filename=log_filename,
            total_duration=total_duration
        ))

    print(f"✅ Report generated successfully: {filename}")
